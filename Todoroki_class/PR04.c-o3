/* Monte Carlo simulation for TSP  */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define lsize 48
#define mcs 4000   /* Monte Carlo steps   */
int main(){  
  int is[lsize][lsize];        /* ising spin variable */
  int js[lsize][lsize];        /* ising spin variable */
  int jp[lsize], jm[lsize];
  int i, j, k, ix, istep, itemp;
  int n[lsize];
  int x[lsize], y[lsize];
  int d[lsize][lsize];
  FILE *fp;
  char *fname = "att48.txt";
  int ipoint1, ipoint2;


/* temp : 温度 */
  double temp,beta;
/* r    : 乱数用 */
  double r;
/* w    : 遷移確率 */
  double w;
  int dxx, dxx1, dxx2;

/* ファイルの読み込み */
  fp = fopen( fname, "r" );
  if( fp == NULL ){
    printf( "%sファイルが読み込めません", fname );
    return -1;
  }

  i=0;
  while( ( fscanf( fp, "%d,%d,%d", &n[i], &x[i],&y[i]) ) != EOF ){
    i=i+1;
  }
  fclose( fp );


/* 都市間の距離の計算*/
  for(i=0 ; i<lsize ;i++){
    for(j=0 ; j<lsize ; j++){
      d[i][j]=(int)(sqrt(((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]))/10.0));
  }
  }
  
  srand(1);

  for(j=0;j<lsize;j++){
    jp[j]=j+1;
    jm[j]=j-1;
  }
  jp[lsize-1]=0;
  jm[0]=lsize-1;

/* 初期状態の入力 */
  for(i=0;i<lsize;i++){
  for(j=0;j<lsize;j++){
    is[i][j] = 0;
  }}
  for(i=0;i<lsize;i++){
    is[i][i] = 1;
  }

  temp=300.0;
  for(itemp=1;itemp<=40;itemp++){
  temp = temp*0.9;
  beta = 1.0/temp;
  for(istep=1;istep<=mcs;istep++){
  for(ix=0;ix<lsize;ix++){
    
    for(j=0 ; j<lsize ; j++){
    for(i=0 ; i<lsize ; i++){
      js[i][j]=is[i][j];
    }}
  
/* 入れ替える二つを乱数で決定 */
    ipoint1= rand()% (lsize-1)+1;
    ipoint2= rand()% (lsize-1)+1;
  
  
/* 入れ替え*/
    for(i=0 ; i<lsize ; i++){
      js[i][ipoint1]=is[i][ipoint2];
      js[i][ipoint2]=is[i][ipoint1];
    }
  
/* 現在の状態での移動距離を計算*/
    dxx1=0;
    for(j=0 ; j<lsize ; j++){
    for(i=0 ; i<lsize ; i++){
      dxx1 = dxx1 + d[i][j]*is[i][ipoint1]*is[j][jp[ipoint1]]
                  + d[i][j]*is[i][ipoint1]*is[j][jm[ipoint1]]
                  + d[i][j]*is[i][ipoint2]*is[j][jp[ipoint2]]
                  + d[i][j]*is[i][ipoint2]*is[j][jm[ipoint2]];
    }
    }



/* 入れ替えあとの移動距離を計算*/
    dxx2=0;
    for(j=0 ; j<lsize ; j++){
    for(i=0 ; i<lsize ; i++){
      dxx2 = dxx2 + d[i][j]*js[i][ipoint1]*js[j][jp[ipoint1]]
                  + d[i][j]*js[i][ipoint1]*js[j][jm[ipoint1]]
                  + d[i][j]*js[i][ipoint2]*js[j][jp[ipoint2]]
                  + d[i][j]*js[i][ipoint2]*js[j][jm[ipoint2]];
    }
    }


  /* 遷移確率の計算*/ 
      w=exp(-beta*(dxx2-dxx1));
      r=(double)(rand())/RAND_MAX;
/* 遷移の判定*/
    if(r<=w) {
      for(i=0 ; i<lsize ; i++){
        is[i][ipoint1]=js[i][ipoint1];
        is[i][ipoint2]=js[i][ipoint2];
      }
    }
  }
  }

/* 結果の判定*/

  for(j=0 ; j<lsize ; j++){
    for(i=0 ; i<lsize ; i++){
      if(is[i][j]==1) printf("%d ",i+1);
    }
  }

    
    dxx =0;
    for(j=0 ; j<lsize ; j++){
      for(i=0 ; i<lsize ; i++){
        for(k=0 ; k<lsize ; k++){
          dxx = dxx+d[i][j]*is[i][k]*is[j][jp[k]];
        }
      }
    }
    
  printf("\ntemp = %f, distance = %d \n",temp, dxx);
  }
 
  return 0;
}
