#include<stdlib.h>
#include <GL/glut.h>
#include<math.h>
#include<stdio.h>

#define PI 3.14159265

static GLfloat ang = 0.0;
static GLfloat x = 0.0;
static GLfloat y = 0.0;
static GLfloat up = 0.0;
static GLfloat ud = 0.0;


int i=0, n=100, h=0;
int mode=0;

//半径
float  R=4;
//中心
float  x0=0;
float  y0=10;
//運動に関する値
float  g = -0.00980665;
float  t = 0;
float  Vx = -10;
float  Vy = 0;
float  V1 = 0;
float ddx = 0;
float ddy = 0;
float dt = 0.001;

float fx=0;
float fdx=0;
float fddx=3.0;	//足加速度
float fy=0,fdy=0,fddy=0;

float w = 0.9;		//跳ね返り係数
float u = 0.9;		//床の摩擦係数
float o = 0.9;		//足の反射係数

float p = 0;		//あたり判定の大きさ

float D2=0,D=0;		//足とボールの距離

float R2 = 5;

int f0x=-40 ,f0y= -30;
int fl=20;	//足の長さ
int fe=60;		//足の終わり座標

int xf=0;
int yf=0;
int lf=20;
float the=-20;

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 1.0, 0.0);
	glPushMatrix();
	
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_LINE_LOOP);
	
	glVertex2f(-50, -47);
	glVertex2f(50, -47);
	
	glEnd();
	glBegin(GL_LINE_LOOP);
	
	up = 0;
	ud = 101;
	
	for(i=up;i<ud;i++){
		y = y0 + R*sin(2*PI*(float)i/n);
		x = x0 + R*cos(2*PI*(float)i/n);
		glVertex2f(x, y);
	}
	
	glVertex2f(x0, y0);
	
	glEnd();
	
	glColor3f(1.0, 0.0, 1.0);
	
	glBegin(GL_POLYGON);
	
	glVertex2f(f0x+fx, f0y+fl);
	glVertex2f(f0x+fx, f0y);
	glVertex2f(f0x+10+R2+fx, f0y);
	glVertex2f(f0x+10+R2+fx, f0y+R2);
	glVertex2f(f0x+10+fx, f0y+R2);
	glVertex2f(f0x+10+fx, f0y+fl);
	
	glEnd();
	glFlush();
	
	glPopMatrix();
	glutSwapBuffers();
    
}

void simu(void)
{
	p = R + R2/2 + 0.5;
	
	t = t + dt;
	ddy = ddy + g;
	
	Vx = Vx + ddx*dt;
	x0 = x0 + Vx*dt + ddy*dt*dt/2.0;
	Vy = Vy + ddy*dt;
	y0 = y0 + Vy * dt + ddy*dt*dt/2.0;
	
	
	if(x0<=-50+R | x0 >= 50-R)		//横壁の跳ね返り判定
	{
		Vx = -Vx;
		
	}else{
		if(y0 <= -47+R)
	   	{
			Vy = -Vy*w;
			Vx = Vx * u;
	   	}
		
		if(y0 < -47.01+R)
		{
		
		y0 = -47+R;
		
		}
	}
	
	D2 = (x0-(f0x+10+R2/2+fx)) * (x0-(f0x+10+R2/2+fx)) + (y0-(f0y+R2/2)) * (y0-(f0y+R2/2));
	D = sqrt(D2);
	
	if(D<=p && mode==0){
		
		Vx = -Vx * o + fdx;
		Vy = -Vy * o + fdy;
		mode = 1;
		
	}
	
	if(mode == 1 && D >= p+0.1){
		mode=0;
	}
	
	
	//キックモーション↓
	
	
	the = the + 0.5;
	
	fdx = fdx + fddx*dt;
	fx =fx + fdx*dt + fddx*dt*dt/2.0;
	
	
	if(fx>fe){
		
		fx=fe;
		fdx=0;
		fddx=0;
	
	}
	
	glutPostRedisplay();
}

void init(void)
{
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glShadeModel(GL_FLAT);
}

void reshape(int w, int h)
{
  glViewport( 0, 0, w, h );                      //ビューポイント
  glMatrixMode(GL_PROJECTION);                   //視野
  glLoadIdentity();                              //行列リセット
  glOrtho(-50.0, 50.0, -50.0, 50.0, -1.0, 1.0);  //正射影行列
  glMatrixMode(GL_MODELVIEW);                    //モード切替え
  glLoadIdentity();                              //行列リセット
}

void mouse(int button, int state, int x, int y){
  switch (button) {
     case GLUT_LEFT_BUTTON:           //左クリック
     	if ( state == GLUT_DOWN)        //ボタン押された:GLUT_DOWN
     		glutIdleFunc(simu);
     	break;
     case GLUT_RIGHT_BUTTON:          //右クリック
		if ( state == GLUT_DOWN)
     		glutIdleFunc(NULL);
     	break; 
     default:
     	break; 
  }
}

void keyboard(unsigned char key, int x, int y)
{
  if ( key == '\x1b') exit(0);
}

int main(int argc, char *argv[])
{
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
  glutInitWindowSize (400, 400);
  glutInitWindowPosition(100,100);
  glutCreateWindow(argv[0]);
  init();
  //Functions
  glutReshapeFunc(reshape);
  glutKeyboardFunc(keyboard);
  glutMouseFunc(mouse);
  glutDisplayFunc(display);
    glutMainLoop();
  return 0;
}